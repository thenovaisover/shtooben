{"version":3,"sources":["asset/nm.mp4","asset/m.mov","asset/mn.mp4","asset/black.mp4","asset/n.mp4","asset/nn.mp4","asset/qq.mp4","asset/mm.mp4","asset/thread.mp4","asset/inward.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","ref","Component","BgVid","props","src","autoPlay","loop","muted","Header","Nm","About","Black","Truth","Mn","Course","Mov","Feel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,gC,qBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,2FCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,yNCcrCC,G,6LAEF,OACE,yBAAKC,UAAU,MAAMC,IAAI,OACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARUC,cAcZC,EAAQ,SAAAC,GACZ,OACE,yBAAKJ,UAAU,UACb,2BAAOK,IAAKD,EAAMC,IAAKC,UAAQ,EAACC,MAAI,EAACC,OAAK,MAK1CC,EAAS,WACb,OACE,4BAAQT,UAAU,UAChB,kBAAC,EAAD,CAAOK,IAAKK,MACZ,yBAAKV,UAAU,SACb,4BACE,4BACE,6BACA,6BACA,6BACA,6BAJF,eAME,6BACA,6BAPF,YAQW,0BAAMA,UAAU,SAAhB,OARX,WASE,6BATF,iBAkBJW,EAAQ,WACZ,OACE,4BAAQX,UAAU,UAChB,kBAAC,EAAD,CAAOK,IAAKO,MACZ,yBAAKZ,UAAU,SACb,yBAAKA,UAAU,SACb,4BACE,6BACA,6BAFF,eAGc,oCAHd,aAIE,6BACA,6BALF,oBAMmB,+CANnB,kBAcJa,EAAQ,WACZ,OACE,4BAAQb,UAAU,UAChB,kBAAC,EAAD,CAAOK,IAAKS,MACZ,yBAAKd,UAAU,SACb,yBAAKA,UAAU,SACb,4BACE,6CAEE,6BAFF,qBAKA,0BAAMA,UAAU,SAAhB,UAEE,kDAEE,6BAFF,4BAIM,IACN,6BAPF,aASQ,IACR,4CAhBF,SAwBJe,EAAS,WACb,OACE,4BAAQf,UAAU,UAChB,kBAAC,EAAD,CAAOK,IAAKW,MACZ,yBAAKhB,UAAU,UACb,yBAAKA,UAAU,SACb,mDAEE,6BAFF,kBAIE,6BAJF,wBAME,6BANF,sBAQE,6BARF,6BAUE,6BAVF,yBAWE,6BAXF,2BAaE,6BAbF,yBAeE,6BAfF,gDAuBJiB,EAAO,WACX,OACE,4BAAQjB,UAAU,UAChB,kBAAC,EAAD,CAAOK,IAAKK,MACZ,yBAAKV,UAAU,QACb,yBAAKA,UAAU,SACb,4BACE,oCAEM,IAHR,8BAI8B,IAC5B,sCACS,6BACP,6BAAM,6BACN,6BAHF,OAIM,6BAJN,SAIkB,0BAAMA,UAAU,SAAhB,OAJlB,OAKE,6BACA,6BAAM,6BACN,6BAPF,gBALF,2BAwBKD,IC7JKmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.134e17ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nm.b6d65550.mp4\";","module.exports = __webpack_public_path__ + \"static/media/m.c5b4c1f3.mov\";","module.exports = __webpack_public_path__ + \"static/media/mn.351f4c0a.mp4\";","module.exports = __webpack_public_path__ + \"static/media/black.bfef1d6d.mp4\";","module.exports = __webpack_public_path__ + \"static/media/n.db301927.mp4\";","module.exports = __webpack_public_path__ + \"static/media/nn.ade63e1d.mp4\";","module.exports = __webpack_public_path__ + \"static/media/qq.0ea2864c.mp4\";","module.exports = __webpack_public_path__ + \"static/media/mm.d221044e.mp4\";","module.exports = __webpack_public_path__ + \"static/media/thread.da282c7e.mp4\";","module.exports = __webpack_public_path__ + \"static/media/inward.d817051c.mp4\";","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport New from \"./asset/n.mp4\";\nimport Mov from \"./asset/m.mov\";\nimport Nn from \"./asset/nn.mp4\";\nimport Qt from \"./asset/qq.mp4\";\nimport Nm from \"./asset/nm.mp4\";\nimport Mn from \"./asset/mn.mp4\";\nimport Mm from \"./asset/mm.mp4\";\nimport Black from \"./asset/black.mp4\";\nimport Thread from \"./asset/thread.mp4\";\nimport Inward from \"./asset/inward.mp4\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" ref=\"app\">\n        <Header />\n        <About />\n        <Truth />\n        <Course />\n        <Feel />\n      </div>\n    );\n  }\n}\n\nconst BgVid = props => {\n  return (\n    <div className=\"bg-vid\">\n      <video src={props.src} autoPlay loop muted />\n    </div>\n  );\n};\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <BgVid src={Nm} />\n      <div className=\"inner\">\n        <h1>\n          <h2>\n            <br />\n            <br />\n            <br />\n            <br />\n            Who are you?\n            <br />\n            <br />\n            You have <span className=\"fancy\">no </span> idea...\n            <br />\n            Do you...\n          </h2>\n        </h1>\n      </div>\n    </header>\n  );\n};\n\nconst About = () => {\n  return (\n    <header className=\"header\">\n      <BgVid src={Black} />\n      <div className=\"truth\">\n        <div className=\"inner\">\n          <h1>\n            <br />\n            <br />\n            You haven't <h2>lost</h2>your mind.\n            <br />\n            <br />\n            You just haven't <h2>taken ownership</h2> of it yet\n          </h1>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nconst Truth = () => {\n  return (\n    <header className=\"header\">\n      <BgVid src={Mn} />\n      <div className=\"about\">\n        <div className=\"inner\">\n          <h1>\n            <h2>\n              start noticing\n              <br />\n              the blatant hints\n            </h2>\n            <span className=\"fancy\">\n              riddled\n              <h2>\n                throughout the very\n                <br />\n                fabric of your existence\n              </h2>{\" \"}\n              <br />\n              Recognize\n            </span>{\" \"}\n            <h2>the patterns</h2>.\n          </h1>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nconst Course = () => {\n  return (\n    <header className=\"header\">\n      <BgVid src={Mov} />\n      <div className=\"course\">\n        <div className=\"inner\">\n          <h2>\n            Your invaluable gift\n            <br />\n            of free thought\n            <br />\n            is being weakened by:\n            <br />\n            carnal distrations,\n            <br />\n            and a shocking disinterest\n            <br /> in the examination of\n            <br />\n            anything outside of your\n            <br />\n            societal comfort zone.\n            <br /> You exist in a \"safety net\" of monotony\n          </h2>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nconst Feel = () => {\n  return (\n    <header className=\"header\">\n      <BgVid src={Nm} />\n      <div className=\"feel\">\n        <div className=\"inner\">\n          <h1>\n            <h2>\n              This\n            </h2>{\" \"}\n            significantly unintelligent{\" \"}\n            <h2>\n              society<br />\n              <br /><br />\n              <br />\n              will<br />think <span className=\"fancy\">for</span> you\n              <br />\n              <br /><br />\n              <br />\n              if you don't\n            </h2>\n          \n            Think for yourself.\n          </h1>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}